name: CI
on:
  push:
    branches:
    - master
    tags:
    - "v*"
  pull_request:

jobs:
  examples:
    runs-on: ${{ matrix.OS }}
    strategy:
      fail-fast: false
      matrix:
        OS: ["ubuntu-latest", "windows-latest"]
    steps:
    - name: Don't convert LF to CRLF during checkout
      if: runner.os == 'Windows'
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    - name: Install python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r examples/requirements.txt --no-dependencies
    - uses: coursier/cache-action@v6.3
    - uses: coursier/setup-action@v1.2.1
      with:
        jvm: 8
    - run: ./mill -i validateExamples
      shell: bash

  test:
    runs-on: ${{ matrix.OS }}
    strategy:
      fail-fast: false
      matrix:
        OS: [ubuntu-latest]
        JDK: [8]
        SCALA: [2.12.15, 2.12.16, 2.13.7, 2.13.8, 3.1.2, 3.1.3]
        include:
          - OS: windows-latest
            JDK: 8
            SCALA: 2.13.8
          - OS: ubuntu-latest
            JDK: 11
            SCALA: 2.12.16
    steps:
    - name: Don't convert LF to CRLF during checkout
      if: runner.os == 'Windows'
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
    - uses: coursier/cache-action@v6.3
    - uses: coursier/setup-action@v1.2.1
      with:
        jvm: ${{ matrix.JDK }}
        apps:
    - run: ./mill -i "__[$SCALA].test"
      shell: bash
      env:
        SCALA: ${{ matrix.SCALA }}

  bincompat:
    runs-on: ubuntu-latest
    steps:
    - name: Don't convert LF to CRLF during checkout
      if: runner.os == 'Windows'
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
    - uses: coursier/cache-action@v6.3
    - uses: coursier/setup-action@v1.2.1
      with:
        jvm: 8
    - run: ./mill __.mimaReportBinaryIssues
      shell: bash

  website:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
    - uses: coursier/cache-action@v6.3
    - uses: coursier/setup-action@v1.2.1
      with:
        jvm: 8
        apps: cs
    - run: ./mill docs.generate
      shell: bash

  publishLocal:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
    - uses: coursier/cache-action@v6.3
    - uses: coursier/setup-action@v1.2.1
      with:
        jvm: 8
        apps:
    - run: ./mill '__.publishLocal'
      shell: bash

  # job whose name doesn't change when we bump Scala versions, add OSes, â€¦
  # We require this job for auto-merge.
  all-tests:
    needs: [examples, bincompat, test, website, publishLocal]
    runs-on: ubuntu-latest
    steps:
    - run: true
      shell: bash

  release:
    needs: all-tests
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
    - uses: coursier/cache-action@v6.3
    - uses: coursier/setup-action@v1.2.1
      with:
        jvm: 8
    - run: echo "$PGP_SECRET" | base64 --decode | gpg --batch --import
      shell: bash
      env:
        PGP_SECRET: ${{ secrets.PGP_SECRET }}
    - run: ./mill publishSonatype __.publishArtifacts
      shell: bash
      env:
        PGP_PASSWORD: ${{ secrets.PGP_PASSPHRASE }}
        SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
        SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}

  upload-launcher:
    needs: release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
    - uses: coursier/cache-action@v6.3
    - uses: coursier/setup-action@v1.2.1
      with:
        jvm: 8
    - run: ./mill -i ci.uploadLaunchers
      if: startsWith(github.ref, 'refs/tags/v')
      shell: bash
      env:
        UPLOAD_GH_TOKEN: ${{ secrets.GH_TOKEN }}

  update-docker-images:
    needs: release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
    - uses: coursier/cache-action@v6.3
    - uses: coursier/setup-action@v1.2.1
      with:
        jvm: 8
    - run: scripts/update-docker-images.sh
      shell: bash
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  update-website:
    needs: [upload-launcher, update-docker-images]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
    - uses: coursier/cache-action@v6.3
    - uses: coursier/setup-action@v1.2.1
      with:
        jvm: 8
        apps: cs
    - run: |
        ./mill docs.generate --npm-install --yarn-run-build
        scripts/website0/versioned-docs.sh --update
      if: startsWith(github.ref, 'refs/tags/v')
      shell: bash
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
        WEBSITE_DIR: docs/website
        VERSIONED_DOCS_REPO: almond-sh/versioned-docs
    - run: |
        scripts/website0/versioned-docs.sh
        ./mill docs.generate --npm-install --yarn-run-build --relativize
        scripts/website0/push-website.sh
      shell: bash
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
        WEBSITE_DIR: docs/website
        REPO: almond-sh/almond
        VERSIONED_DOCS_REPO: almond-sh/versioned-docs
